<UserControl x:Class="Verse3.InfiniteCanvasWPFControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Verse3"
             xmlns:InfiniteCanvas="clr-namespace:InfiniteCanvas;assembly=InfiniteCanvas"
             xmlns:core="clr-namespace:Core;assembly=Core"
             mc:Ignorable="d"
             d:DesignHeight="1490" d:DesignWidth="2528"
             Loaded="Control_Loaded"
             FocusManager.FocusedElement="{Binding ElementName=scroller}">
    <UserControl.Resources>
        <!-- 
        Converts a color value to a brush.
        -->
        <local:ColorToBrushConverter 
            x:Key="colorToBrushConverter"
            />
        <local:CanvasSizeOffsetPseudoConverter 
            x:Key="canvasSizeOffsetPseudoConverter"
            />
        <!-- 
        Override the style of the ListBox to remove the ScrollViewer.
        All we want is ListBox logic but based on a Canvas.
        -->
        <Style x:Key="noScrollViewerListBoxStyle" TargetType="ListBox">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBox">
                        <Canvas x:Name="InfiniteCanvasBackground" 
                            Background="{TemplateBinding Background}"
                            IsItemsHost="True" 
                            />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- 
        Override the style of each ListBoxItem to bind Canvas.Left, Canvas.Top and IsSelected.
        -->
        <Style 
            x:Key="listBoxItemStyle" 
            TargetType="ListBoxItem"
            >
            <Setter 
                Property="Canvas.Left"
                Value="{Binding X, Converter={StaticResource canvasSizeOffsetPseudoConverter}}" 
                />
            <Setter 
                Property="Canvas.Top" 
                Value="{Binding Y, Converter={StaticResource canvasSizeOffsetPseudoConverter}}" 
                />
            <Setter 
                Property="IsSelected" 
                Value="{Binding IsSelected}" 
                />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <!--
                        This border is used for indicating selection.
                        Normally it is transparent, when the item is selected the border is set to blue.
                        -->
                        <Border 
                            Name="Border"
                            BorderThickness="1"
                            Padding="2"
                            >
                            <ContentPresenter />
                        </Border>
                        <ControlTemplate.Triggers>
                            <!--
                            When the ListBoxItem is selected draw a simple blue border around it.
                            -->
                            <Trigger Property="IsSelected" Value="true">
                                <Setter 
                                    TargetName="Border" 
                                    Property="BorderBrush"
                                    Value="Blue"
                                    />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <DockPanel>
        <InfiniteCanvas:InfiniteCanvasControl x:Name="InfiniteCanvasControl1"
                                              ContentScale="{Binding Source={x:Static core:DataModel.Instance}, Path=ContentScale, Mode=TwoWay}"
                                              ContentOffsetX="{Binding Source={x:Static core:DataModel.Instance}, Path=ContentOffsetX, Mode=TwoWay}"
                                              ContentOffsetY="{Binding Source={x:Static core:DataModel.Instance}, Path=ContentOffsetY, Mode=TwoWay}"
                                              ContentViewportWidth="{Binding Source={x:Static core:DataModel.Instance}, Path=ContentViewportWidth, Mode=OneWayToSource}"
                                              ContentViewportHeight="{Binding Source={x:Static core:DataModel.Instance}, Path=ContentViewportHeight, Mode=OneWayToSource}"
                                              Background="#FF292929"
                                              MouseDown="zoomAndPanControl_MouseDown"
                                              MouseUp="zoomAndPanControl_MouseUp"
                                              MouseMove="zoomAndPanControl_MouseMove"
                                              MouseWheel="zoomAndPanControl_MouseWheel"
                                              MouseDoubleClick="zoomAndPanControl_MouseDoubleClick" Foreground="White">
            <Grid
                Width="{Binding Source={x:Static core:DataModel.Instance}, Path=ContentWidth}"
                Height="{Binding Source={x:Static core:DataModel.Instance}, Path=ContentHeight}">
                <ListBox
                    x:Name="LBcontent"
                    Background="#FF1D1D1D"
                    Foreground="White"
                    ItemsSource="{Binding Source={x:Static core:DataModel.Instance}, Path=Elements}"
                    Style="{StaticResource noScrollViewerListBoxStyle}"
                    ItemContainerStyle="{StaticResource listBoxItemStyle}"
                    />
                <!--
                This Canvas and Border are used as a very simple way to render a drag rectangle that the user
                uses to specify an area to zoom in on.
                -->
                <Canvas
                    x:Name="dragZoomCanvas"
                    Visibility="Collapsed"
                    >
                    <Border 
                        x:Name="dragZoomBorder"
                        BorderBrush="Black"
                        BorderThickness="1"
                        Background="Silver"
                        CornerRadius="1"
                        Opacity="0"
                        />
                </Canvas>
                <Canvas
                    x:Name="dragSelectCanvas"
                    Visibility="Collapsed"
                    >
                    <Border 
                        x:Name="dragSelectBorder"
                        BorderBrush="Black"
                        BorderThickness="1"
                        Background="#ff6700"
                        CornerRadius="1"
                        Opacity="0"
                        />
                </Canvas>
            </Grid>
        </InfiniteCanvas:InfiniteCanvasControl>
    </DockPanel>
</UserControl>
